/*    _____               __  ___          __            ____        _      __   / ___/__ ___ _  ___ /  |/  /__  ___  / /_____ __ __/ __/_______(_)__  / /_  / (_ / _ `/  ' \/ -_) /|_/ / _ \/ _ \/  '_/ -_) // /\ \/ __/ __/ / _ \/ __/  \___/\_,_/_/_/_/\__/_/  /_/\___/_//_/_/\_\\__/\_, /___/\__/_/ /_/ .__/\__/                                               /___/             /_/                                               See Copyright Notice in gmMachine.h*/#ifndef _GMCONFIG_P_H_#define _GMCONFIG_P_H_/* Removed all pragma preprocessor calls, it's never a good idea to get rid of warnings, however, gcc compilers ignore #pragma lines *//* Wrap this, just in case */#ifndef _CRT_SECURE_NO_DEPRECATE#define _CRT_SECURE_NO_DEPRECATE	1#endif#include <malloc.h>#include <new>#include <cassert>/* Try and get system-specific integer-style types */#if GM_MSVC_EARLIER_2010	typedef __int8 int8_t	typedef __int16 int16_t;	typedef __int32 int32_t;	typedef unsigned __int32 uint32_t;	typedef __int64 int64_t;	typedef unsigned __int64 uint64_t;#else#	include <cstdint>#endif/* System defines */#if defined(_XBOX)  #define GM_DEFAULT_ALLOC_ALIGNMENT 4#endif /* _XBOX */#if defined(WIN32)  #define GM_LITTLE_ENDIAN      1  #if defined(_M_X64) /* 64bit target */    #define GM_DEFAULT_ALLOC_ALIGNMENT 16    #define GM_PTR_SIZE_64 /* Ptr size is 64bit */  #else /* 32bit target */    #define GM_DEFAULT_ALLOC_ALIGNMENT 4    #define GM_PTR_SIZE_32 /* Ptr size is 32bit */  #endif#endif /* _WIN32 */#define GM_NL                 "\r\n" // "\n"#define GM_FORCEINLINE        inline  // inline#define GM_INLINE             inline#define _gmstricmp            stricmp // strcasecmp#define _gmsnprintf           snprintf // snprintf#define _gmvsnprintf          vsnprintf // vsnprintf#define GM_PRINTF             printf#define GM_MAKE_ID32( a, b, c, d )  ( ((d)<<24) | ((c)<<16) | ((b)<<8) | (a))#define GM_MIN_FLOAT32        -3.402823466e38f#define GM_MAX_FLOAT32        3.402823466e38f#define GM_MIN_FLOAT64        -1.7976931348623158e308#define GM_MAX_FLOAT64        1.7976931348623158e308#define GM_SMALLEST_FLOAT32   1.175494351e-38f#define GM_SMALLEST_FLOAT64   2.2250738585072014e-308#define GM_MIN_UINT8          0#define GM_MAX_UINT8          255#define GM_MIN_INT8           -128#define GM_MAX_INT8           127#define GM_MIN_UINT16         0#define GM_MAX_UINT16         65535#define GM_MIN_INT16          -32768#define GM_MAX_INT16          32767#define GM_MIN_UINT32         0#define GM_MAX_UINT32         4294967295#define GM_MIN_INT32          -2147483648#define GM_MAX_INT32          2147483647#define GM_MAX_INT            2147483647#define GM_MAX_SHORT          32767#define GM_MAX_CHAR_STRING    256#define GM_MAX_PATH           256#ifndef LPCTSTRtypedef const char * LPCTSTR;#endiftypedef unsigned int gmuint;typedef int gmint;typedef int8_t gmint8;typedef unsigned int8_t gmuint8;typedef int16_t gmint16;typedef unsigned int16_t gmuint16;typedef int32_t gmint32;typedef unsigned int32_t gmuint32;typedef float gmfloat;typedef intptr_t gmptr;typedef uintptr_t gmuptr;#ifdef GM_CRT_DEBUG#	include <crtdbg.h>#	ifdef _DEBUG#		define DEBUG_CLIENTBLOCK new (_CLIENT_BLOCK, __FILE__, __LINE__)#		define SET_CRT_DEBUG_FIELD(a) _CrtSetDbgFlag( (a) | _CrtSetDbgFlag(_CRTDBG_REPORT_FLAG) )#		define CLEAR_CRT_DEBUG_FIELD(a) _CrtSetDbgFlag( ~(a) & _CrtSetDbgFlag(_CRTDBG_REPORT_FLAG) )#		define _gmDumpLeaks() SET_CRT_DEBUG_FIELD( _CRTDBG_LEAK_CHECK_DF ) //Flag to dump memory leaks on exit#	else#		define DEBUG_CLIENTBLOCK new#		define _gmDumpLeaks() //Do nothing#	endif#endif /* GM_CRT_DEBUG */#endif /* _GMCONFIG_P_H_ */